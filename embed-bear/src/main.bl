// Simple file in bearlang, should read as a simplified C lang with tighter rules, mixture of C, Rust and Zig syntax

const PORTC_PIN7:       u32 = 7;                                        /* USER GREEN LED on GPIO A Bus, Pin 5  */
const LED_GRN:          u32 = PORTC_PIN7;                               /* USER GREEN LED on GPIO A Bus, Pin 5  */
const PORTB_PIN7:       u32 = 7;                                        /* USER BLUE LED on GPIO B Bus, Pin 7   */
const LED_BLU:          u32 = PORTB_PIN7;                               /* USER BLUE LED on GPIO B Bus, Pin 7   */
const PORTA_PIN9:       u32 = 9;                                        /* USER RED LED on GPIO 9 Bus, Pin 9    */
const LED_RED:          u32 = PORTA_PIN9;                               /* USER RED LED on GPIO 9 Bus, Pin 9    */

/* GPIO Port A REGISTERS */
const GPIOA_BASE:       u32 = 0x42020000;                               /* GPIO Port A base address */
const GPIOA_MODER:      vol u32* = (GPIOA_BASE  + 0x00);                /* Port A Mode register */
const GPIOA_OTYPER:     vol u32* = (GPIOA_BASE  + 0x04);                /* Port A Output Type Register */
const GPIOA_BSRR:       vol u32* = (GPIOA_BASE  + 0x18);                /* Output Data Set And Reset Register */

/* GPIO Port B REGISTERS */
const GPIOB_BASE:       u32 = 0x42020400;                               /* GPIO Port A base address */
const GPIOB_MODER:      vol u32* = (GPIOB_BASE  + 0x00);                /* Port A Mode register */
const GPIOB_OTYPER:     vol u32* = (GPIOB_BASE  + 0x04);                /* Port A Output Type Register */
const GPIOB_BSRR:       vol u32* = (GPIOB_BASE  + 0x18);                /* Output Data Set And Reset Register */

/* GPIO Port B REGISTERS */
const GPIOC_BASE:       u32 = 0x42020800;                               /* GPIO Port C base address */
const GPIOC_MODER:      vol u32* = (GPIOC_BASE  + 0x00);                /* Port C Mode register */
const GPIOC_OTYPER:     vol u32* = (GPIOC_BASE  + 0x04);                /* Port C Output Type Register */
const GPIOC_BSRR:       vol u32* = (GPIOC_BASE  + 0x18);                /* Output Data Set And Reset Register */

const PORTA_AHBEN:      u32 = 0;                                        /* GPIOA Enable is located on AHB2 Board Bit 0 */
const PORTB_AHBEN:      u32 = 1;                                        /* GPIOB Enable is located on AHB2 Board Bit 1 */
const PORTC_AHBEN:      u32 = 2;                                        /* GPIOC Enable is located on AHB2 Board Bit 2 */

/* Reset and Clock Control (RCC) */
const RCC_BASE:         u32 = 0x40021000;                               /* RCC base address */
const RCC_CR:           vol u32* = (RCC_BASE + 0x00);                   /* Clock Control Register */
const RCC_AHB2ENR:      vol u32* = (RCC_BASE + 0x4C);                   /* AHB2 Enable Register */

/* User required */                                          
const MASK_2_BIT         (uint32_t)0x00000003                           /* 2 bit mask, example 0011 = 0x03 */

/* Extern Keyword Allows To Be Call */
// extern void
ext fn _system_init() {
    *RCC_AHB2ENR |= (1 << PORTA_AHBEN);
    *RCC_AHB2ENR |= (1 << PORTB_AHBEN);
    *RCC_AHB2ENR |= (1 << PORTC_AHBEN);
}

// extern void
ext fn _start() { 
    *GPIOC_MODER &= (~(MASK_2_BIT << (LED_GRN * 2)));                   /* Clear Mode Type */
    *GPIOC_MODER |= (1 << (LED_GRN * 2));                               /* Set Mode Type - Output */
    *GPIOC_OTYPER &= (~(1 << LED_GRN));                                 /* Set Output Type */
    *GPIOB_MODER &= (~(MASK_2_BIT << (LED_BLU * 2)));                   /* Clear Mode Type */
    *GPIOB_MODER |= (1 << (LED_BLU * 2));                               /* Set Mode Type - Output */
    *GPIOB_OTYPER &= (~(1 << LED_BLU));                                 /* Set Output Type */
    *GPIOA_MODER &= (~(MASK_2_BIT << (LED_RED * 2)));                   /* Clear Mode Type */
    *GPIOA_MODER |= (1 << (LED_RED * 2));                               /* Set Mode Type - Output */
    *GPIOA_OTYPER &= (~(1 << LED_RED));                                 /* Set Output Type */

    loop {
        for n: u32 in 0..1200000 {  // Use a number will iterate over - similar to for(int i = 0; i < 1200000; i++) {}. for n in array (should give you each element of the array)
            if i == 300000 {
                *GPIOC_BSRR = (1 << LED_GRN);
            } elif i == 600000 {
                *GPIOB_BSRR = (1 << LED_BLU);
            } elif i == 900000 {
                *GPIOA_BSRR = (1 << LED_RED);
            } elif i == 0 {
                *GPIOC_BSRR = (1 << (LED_GRN + 16));
                *GPIOB_BSRR = (1 << (LED_BLU + 16));
                *GPIOA_BSRR = (1 << (LED_RED + 16));
            }
        }
    }
}

// extern void
ext fn __aeabi_unwind_cpp_pr0() {
    //loop {}
}